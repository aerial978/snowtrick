<!-- Modal -->
<div class="modal fade" id="newVideoModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content p-2">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel"></h1>
            </div>
            {{ form_start(formVideo, { 'attr': { 'id': 'videoForm' } }) }}
                <div class="modal-body">
                    <div>
                        <div class="form-group mb-3">
                            {{ form_label(formVideo.newVideoLink) }}
                            {{ form_widget(formVideo.newVideoLink) }}
                        </div>
                    </div>
                    <div id="messagesNew"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-warning">Submit</button>
                </div>
            {{ form_end(formVideo) }}
        </div>
    </div>
</div>
<script>
    // Ajouter un événement qui se déclenche lorsque le DOM est entièrement chargé
    document.addEventListener("DOMContentLoaded", function(){
    // Fonction effacer le message d'erreur
    function clearErrorMessage() {
        document.getElementById('messagesNew').innerHTML = '';
    }
    // Fonction afficher un message d'erreur
    function displayErrorMessage(message) {
        let errorMessageHTML = '<div class="alert alert-danger">' + message + '</div>';
        document.getElementById('messagesNew').innerHTML = errorMessageHTML;
        document.getElementById('messagesNew').style.display = 'block';
    }
    // Fonction afficher un message de succès
    function displaySuccessMessage(message) {
        let successMessageHTML = '<div class="alert alert-success">' + message + '</div>';
        document.getElementById('messagesNew').innerHTML = successMessageHTML;
        document.getElementById('messagesNew').style.display = 'block';
    }
    // Fonction valider un lien vidéo
    function validateVideoLink(videoLink) {
        let regex = /^https?:\/\/(?:www\.)?youtube\.com\/watch\?v=[\w\-]+(?:&t=\d+s?)?$/;
        return regex.test(videoLink);
    }
    // Gèrer la soumission du formulaire lorsqu'il est envoyé
    function submitForm(event) {
        event.preventDefault();
        let form = document.getElementById('videoForm');
        let videoLink = document.getElementById('video_newVideoLink').value;
        // Vérifier si le lien vidéo est vide
        if (!videoLink) {
            displayErrorMessage('Please enter a YouTube link !');
            return;
        }
        // Vérifier la validité des éléments du formulaire
        if (!form.checkValidity()) {
            displayErrorMessage(form.newVideoLink.validationMessage);
            return;
        }
        // Valider le format du lien vidéo
        if (!validateVideoLink(videoLink)) {
            displayErrorMessage('The format of the YouTube link is incorrect !');
            return;
        }
        // Créer une requête XMLHttpRequest pour soumettre les données du formulaire au serveur
        let xhr = new XMLHttpRequest();
        // Ouvrir la connexion pour la requête avec la méthode et l'action spécifiées
        xhr.open(form.method, form.action, true);
        // Définir l'en-tête HTTP pour spécifier le type de contenu
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        // Configurer le gestionnaire d'état pour détecter quand la requête est terminée
        xhr.onreadystatechange = function () {
            // Si l'état de la requête est 4 (terminé)
            if (xhr.readyState === 4) {
                // Si le statut de la requête est 200 (OK)
                if (xhr.status === 200) {
                    // Afficher un message de succès
                    displaySuccessMessage('The form has been submitted successfully !');
                    // Attendre pendant 2000 millisecondes (2 secondes) avant d'exécuter le code à l'intérieur de cette fonction
                    setTimeout(function () {
                        // Recharge la page actuelle après 2 secondes
                        location.reload();
                    }, 2000);
                } else {
                    // Convertir les messages d'erreur renvoyés par la réponse JSON de la requête
                    let errorMessages = JSON.parse(xhr.responseText).errors;
                    // Créer le code HTML pour afficher les messages d'erreur
                    let errorMessageHTML = '<div class="alert alert-danger"><ul>';
                    // Parcourir chaque message d'erreur dans le tableau "errorMessages"
                    errorMessages.forEach(function (value) {
                        errorMessageHTML += '<li>' + value + '</li>';
                    });
                    // Fermer la liste non ordonnée et la balise div pour afficher les messages d'erreur
                    errorMessageHTML += '</ul></div>';
                    // Insèrer les messages d'erreur dans l'élément avec l'ID "messagesNew"
                    document.getElementById('messagesNew').innerHTML = errorMessageHTML;
                    // Afficher l'élément contenant les messages d'erreur
                    document.getElementById('messagesNew').style.display = 'block';
                    // Affiche le modal
                    document.getElementById('newVideoModal').style.display = 'block';
                }
            }
        };
        // Envoyer les données du formulaire via XMLHttpRequest
        xhr.send(new URLSearchParams(new FormData(form)));
    }
    // Fonction réinitialiser le champ du formulaire
    function clearFormFields() {
        document.getElementById('video_newVideoLink').value = '';
    }
    // Fonction gèrer l'événement de masquage du modal
    function handleModalHidden() {
        // Effacer les messages d'erreur
        clearErrorMessage();
        // Effacer le champ du formulaire
        clearFormFields(); 
    }
    // Ajouter les écouteurs d'événements
    document.getElementById('newVideoModal').addEventListener('hidden.bs.modal', handleModalHidden);
    document.getElementById('videoForm').addEventListener('submit', submitForm);
});
</script>

