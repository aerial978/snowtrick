<!-- Modal -->
<div class="modal fade" id="editVideoModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-lg">
		<div class="modal-content p-2">
            <div class="modal-header">
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body alert alert-warning">
				<input type="hidden" id="videoId">
                <div id="videoPreviewContainer" class="centered-iframe"></div>
				<form class="mt-3">
					<label for="text" class="form-label fw-bold">YouTube video link</label>
					<input class="form-control mb-3" type="text" placeholder="https://www.youtube.com/watch?v=_hxLS2ErMiY&t=4s" id="video_url">
                    <div id="messagesEdit"></div>
				</form>    
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<button type="button" id="button_edit" class="btn btn-warning">Submit</button>
			</div>
		</div>
	</div>
</div>
<script>
    // Ajouter un événement qui se déclenche lorsque le DOM est entièrement chargé
    document.addEventListener("DOMContentLoaded", function(){
    // Sélectionner tous les boutons avec la classe "btn-modify"
    let modifyButtons = document.querySelectorAll(".btn-modify");
    // Pour chaque bouton sélectionné précédemment
    modifyButtons.forEach(function(button) {
        // Ajouter un gestionnaire d'événement au clic
        button.addEventListener("click", function() {
            // Récupèrer l'attribut "data-video" du bouton edit dans fichier editTrick.html.twig
            let videoId = this.getAttribute("data-video");
            // Récupèrer l'attribut "data-video-name" du bouton edit dans fichier editTrick.html.twig
            let videoName = this.getAttribute("data-video-name");
            // Sélectionner l'élément avec l'ID "videoId" de la balise input dans modal-body
            let videoIdInput = document.querySelector("#videoId");
             // On insère la valeur de l'attribut dans l'input ayant l'id "videoId"
            document.getElementById("videoId").value = videoId;
            // Vérifier si le nom de la vidéo n'est pas nul
            if (videoName !== null) {
                // Construire l'URL de prévisualisation de la vidéo YouTube
                let url = "https://www.youtube.com/embed/" + videoName;
                // Créer un nouvel élément iframe
                let iframe = document.createElement("iframe");
                iframe.className = "w-auto";
                iframe.width = "325";
                iframe.height = "205";
                iframe.title = "Lecteur vidéo YouTube";
                iframe.frameBorder = "0";
                iframe.allow = "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture";
                iframe.allowFullscreen = true;
                iframe.src = url;
                // Sélectionner le conteneur pour la prévisualisation de la vidéo
                let videoPreviewContainer = document.getElementById("videoPreviewContainer");
                // Supprimer tout iframe précédent
                videoPreviewContainer.innerHTML = "";
                // Ajouter le nouvel iframe
                videoPreviewContainer.appendChild(iframe);
            }
            // Mettre à jour la valeur de l'élément avec l'ID "videoId"
            //videoIdInput.value = videoId;
        });
    });
    // Fonction effacer le message d'erreur
    function clearErrorMessage() {
        document.getElementById('messagesEdit').innerHTML = '';
    }
    // Fonction afficher un message d'erreur
    function displayErrorMessage(message) {
        let errorMessageHTML = '<div class="alert alert-danger">' + message + '</div>';
        document.getElementById('messagesEdit').innerHTML = errorMessageHTML;
        document.getElementById('messagesEdit').style.display = 'block';
    }
    // Fonction afficher un message de succès
    function displaySuccessMessage(message) {
        let successMessageHTML = '<div class="alert alert-success">' + message + '</div>';
        document.getElementById('messagesEdit').innerHTML = successMessageHTML;
        document.getElementById('messagesEdit').style.display = 'block';
    }
    // Fonction valider un lien vidéo
    function validateVideoLink(videoLink) {
        let regex = /^https?:\/\/(?:www\.)?youtube\.com\/watch\?v=[\w\-]+(?:&t=\d+s?)?$/;
        return regex.test(videoLink);
    }
    // Sélectionner l'élément avec l'ID "button_edit"
    let buttonEdit = document.querySelector("#button_edit");
    // Ajouter un gestionnaire d'événement au clic sur le bouton "button_edit"
    buttonEdit.addEventListener("click", function() {
        event.preventDefault();
        // Sélectionner l'élément avec l'ID "video_url"
        let videoUrlInput = document.querySelector("#video_url");
        // Récupèrer et nettoie la valeur de l'élément "video_url"
        let videoUrl = videoUrlInput.value.trim();
        // Vérifier si videoUrl n'est pas vide
        if (videoUrl) {
            // Si le lien vidéo n'est pas valide
            if (!validateVideoLink(videoUrl)) {
                // Afficher un message d'erreur si le format du lien vidéo est incorrect
                displayErrorMessage('The format of the YouTube link is incorrect !');
                // Arrêter l'exécution en cas d'erreur de format
                return;
            }
            // Créer un objet FormData pour les données du formulaire
            let formData = new FormData();
            // Ajouter la valeur de l'URL vidéo au FormData
            formData.append("video_url", videoUrl);
            // Récupèrer la valeur de l'entrée avec l'ID "videoId"
            let videoId = document.querySelector("#videoId").value;
            // Ajouter la valeur de l'ID vidéo au FormData
            formData.append("videoId", videoId);
            // Créer une nouvelle requête XMLHttpRequest
            let xhr = new XMLHttpRequest();
            // Configurer la requête pour envoyer des données en POST à l'URL indiquée
            xhr.open("POST", "{{ path('app_modify_video') }}", true);
            // Configurer le gestionnaire d'événement pour la réponse de la requête
            // Cette fonction est appelée lorsque la requête XMLHttpRequest est terminée
            xhr.onload = function() {
                // Si le statut de la réponse de la requête est 200 (OK)
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        displaySuccessMessage('The form has been submitted successfully !');
                        setTimeout(function () {
                            location.reload();
                        }, 2000);
                    } else {
                        displayErrorMessage('Error: An issue occurred while processing the request. Please try again later !');
                    }
                } else {
                    displayErrorMessage('Error: The request was processed, but the response is not fully ready yet !');
                }
            };
            // Envoyer le FormData avec la requête XMLHttpRequest
            xhr.send(formData);
        } else {
            // Afficher un message d'erreur si le champ est vide
            displayErrorMessage('Please enter a YouTube link !');
            // Arrêter l'exécution en cas d'erreur de format
            return;
        }
    });
    // Réinitialiser le champ du formulaire
    function clearFormFields() {
        document.getElementById('video_url').value = '';
    }
    // Gèrer l'événement de masquage du modal
    function handleModalHidden() {
        // Effacer les messages d'erreur
        clearErrorMessage();
        // Effacer le champ du formulaire
        clearFormFields(); 
    }
    // Ajouter un gestionnaire d'événement lorsque le modal est masqué
    document.getElementById('editVideoModal').addEventListener('hidden.bs.modal', handleModalHidden);
});
</script>
